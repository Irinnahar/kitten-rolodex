{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","user","name","email","id","className","src","alt","CardList","users","map","key","prototype","PropTypes","object","SearchBox","placeholder","handleChange","type","onChange","string","func","App","state","searchField","filteredUser","eventHandler","e","setState","target","value","fetch","then","response","json","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sVAwBeA,G,MAnBF,SAACC,GAAW,IAAD,EACMA,EAAMC,KAA1BC,EADc,EACdA,KAAMC,EADQ,EACRA,MAAOC,EADC,EACDA,GACrB,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAG,mCAA8BF,EAA9B,2BACHG,IAAKL,IACP,4BAAKA,EAAL,KACA,2BAAIC,M,gBCRJK,G,MAAW,SAAAR,GACf,OACE,yBAAKK,UAAU,aAEXL,EAAMS,MAAMC,KAAI,SAAAT,GACd,OAAO,kBAAC,EAAD,CAAMU,IAAKV,EAAKG,GAAIH,KAAMA,UAO3CO,EAASI,UAAY,CACnBX,KAAMY,IAAUC,QAEHN,QCfTO,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OACE,6BACE,2BAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,OAKlFF,EAAUH,UAAY,CACpBI,YAAaH,IAAUO,OACvBH,aAAcJ,IAAUQ,MAEXN,QCqBAO,G,iNAhCbC,MAAQ,CACNd,MAAO,GACPe,YAAa,I,EAEfC,aAAe,EAAKF,MAAMd,M,EAU1BiB,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEJ,YAAaG,EAAEE,OAAOC,S,mFATnB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAvB,GACJ,EAAKmB,SAAS,CAAEnB,MAAOA,S,+BAOnB,IAAD,OACDgB,EAAeU,KAAKZ,MAAMd,MAAM2B,QAAO,SAAAnC,GAC3C,OAAOA,EAAKC,KAAKmC,cAAcC,SAAS,EAAKf,MAAMC,YAAYa,kBAEjE,OAEE,yBAAKhC,UAAU,OACb,8CACA,kBAAC,EAAD,CAAWW,YAAY,cAAcC,aAAckB,KAAKT,eACxD,kBAAC,EAAD,CAAUjB,MAAOgB,S,GA3BPc,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.2c89239f.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './card.component.css';\r\n\r\nconst Card = (props) => {\r\n  const { name, email, id } = props.user;\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        src={`https://www.robohash.org/${id}/?set=set4&size=180x180`}\r\n        alt={name} />\r\n      <h3>{name} </h3>\r\n      <p>{email}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nCard.propTypes = {\r\n  name: PropTypes.string,\r\n  email: PropTypes.string,\r\n  id: PropTypes.number\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from '../card/card.component';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './card-list.styles.css';\r\nconst CardList = props => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {\r\n        props.users.map(user => {\r\n          return <Card key={user.id} user={user} />\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nCardList.prototype = {\r\n  user: PropTypes.object\r\n}\r\nexport default CardList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './search-box.style.css';\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <div>\r\n      <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange} />\r\n    </div>\r\n  )\r\n}\r\n\r\nSearchBox.prototype = {\r\n  placeholder: PropTypes.string,\r\n  handleChange: PropTypes.func\r\n}\r\nexport default SearchBox;","import React, { Component } from 'react';\r\nimport CardList from './components/card-list/card-list.component';\r\nimport SearchBox from './components/search-box/search-box.component';\r\n\r\nimport './App.css';\r\nclass App extends Component {\r\n  state = {\r\n    users: [],\r\n    searchField: ''\r\n  }\r\n  filteredUser = this.state.users;\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => {\r\n        this.setState({ users: users })\r\n      })\r\n  }\r\n\r\n  eventHandler = (e) => {\r\n    this.setState({ searchField: e.target.value })\r\n  }\r\n  render() {\r\n    const filteredUser = this.state.users.filter(user => {\r\n      return user.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n    })\r\n    return (\r\n\r\n      <div className=\"App\">\r\n        <h1>Kitten Rolodex</h1>\r\n        <SearchBox placeholder=\"Search User\" handleChange={this.eventHandler} />\r\n        <CardList users={filteredUser} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}